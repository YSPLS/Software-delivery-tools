on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened]

jobs:
  label_and_comment_issues:
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'reopened')
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Attach labels to issues
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["issue", "fix"]
            })

      - name: Comment on new or reopened issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Thanks for opening this issue! We'll take a look as soon as possible.

  comment_on_closed_issue:
    if: github.event_name == 'issues' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Comment on closed issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            This issue is now resolved.

  comment_on_first_pr:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Check if this is the user's first PR and comment
        uses: actions/github-script@v7
        with:
          script: |
            const username = context.payload.pull_request.user.login;

            // Use pagination to fetch all pull requests created by the user
            const pulls = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
            });

           
            const userPulls = pulls.filter(pr => pr.user.login === username);

          
            if (userPulls.length === 1) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'Congratulations on your first pull request!'
              });
            }
